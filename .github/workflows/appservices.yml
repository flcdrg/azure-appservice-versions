name: Build and Deploy

on:
  push:
    branches: ["main"]
  pull_request:
  workflow_dispatch:

jobs:
  build-bicep:
    name: Build Bicep
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout GitHub Action"
        uses: actions/checkout@v4

      - name: "Login via Azure CLI"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_RBAC_CREDENTIALS }}

      - name: Test
        uses: azure/arm-deploy@v2
        with:
          resourceGroupName: ${{ vars.AZURE_RESOURCE_GROUP }}
          template: ./bicep/main.bicep
          failOnStdErr: false
          deploymentMode: Complete
          additionalArguments: --what-if

      - name: Archive Bicep
        if: success() && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: bicep
          path: "./bicep"

  deploy:
    name: Deploy
    needs:
      - build-bicep
    runs-on: ubuntu-latest
    environment: dev
    if: github.ref == 'refs/heads/main'

    steps:
      - name: "Download Artifact"
        uses: actions/download-artifact@v4
        with:
          name: bicep
          path: "./bicep"

      - name: "Login via Azure CLI"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_RBAC_CREDENTIALS }}
          enable-AzPSSession: true

      - name: deploy
        uses: azure/arm-deploy@v2
        id: deploy
        with:
          resourceGroupName: ${{ vars.AZURE_RESOURCE_GROUP }}
          template: ./bicep/main.bicep
          deploymentMode: Complete
          failOnStdErr: false

      - name: "Get version"
        shell: pwsh
        run: |
          Install-Module Az.Websites, Az.Resources -Force -AllowClobber -Scope CurrentUser -Repository PSGallery

          $json = @"
          {
              "command": 'node --version',
              "dir" : '.'
          }
          "@

          "| Framework | Actual Version |" >> $Env:GITHUB_STEP_SUMMARY
          "|-------|-----------|" >> $Env:GITHUB_STEP_SUMMARY

          $platforms = @('Windows', 'Linux')

          $nodeVersions = @(16, 18, 20)

          foreach ($platform in $platforms) {
            foreach ($version in $nodeVersions) {
                $app = Get-AzWebApp -ResourceGroupName "${{ vars.AZURE_RESOURCE_GROUP }}" -Name "app-$($platform.ToLower())-node$version-versions-australiaeast"

                $resourceName = "$($app.Name)/publishingcredentials";
                $resourceType = "Microsoft.Web/sites/config";
                $publishingCredentials = Invoke-AzResourceAction `
                        -ResourceGroupName $app.ResourceGroup `
                        -ResourceType $resourceType `
                        -ResourceName $resourceName `
                        -Action list `
                        -Force;

                $user = $publishingCredentials.Properties.PublishingUserName;
                $pass = $publishingCredentials.Properties.PublishingPassword;
                $creds = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("${user}:${pass}")));

                $header = @{
                    Authorization = "Basic $creds"
                };
                $kuduApiBaseUrl = "https://$($app.Name).scm.azurewebsites.net";

                $kuduApiUrl = "$kuduApiBaseUrl/api/command";

                $response = Invoke-RestMethod -Method Post -Uri $kuduApiUrl -Headers $header -Body $json -ContentType "application/json"

                $actualVersion = $response.Output.Trim()
                Write-Output "$kuduApiBaseUrl $($version): $actualVersion"
                "| $platform Node $version | $actualVersion |" >> $Env:GITHUB_STEP_SUMMARY

            }
          }
