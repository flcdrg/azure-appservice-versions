name: Build and Deploy

on:
  push:
    branches: ["main"]
  pull_request:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build-bicep:
    name: Build Bicep
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout GitHub Action"
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: "Login via Azure CLI"
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Test
        uses: azure/arm-deploy@v2
        with:
          resourceGroupName: ${{ vars.AZURE_RESOURCE_GROUP }}
          template: ./bicep/main.bicep
          failOnStdErr: false
          deploymentMode: Complete
          additionalArguments: --what-if
          scope: resourcegroup

      - name: Archive Bicep
        if: success() && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: bicep
          path: "./bicep"

  deploy-bicep:
    name: Deploy Bicep
    needs:
      - build-bicep
    runs-on: ubuntu-latest
    environment: dev
    if: github.ref == 'refs/heads/main'

    steps:
      - name: "Download Artifact"
        uses: actions/download-artifact@v5
        with:
          name: bicep
          path: "./bicep"

      - name: "Login via Azure CLI"
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: deploy
        uses: azure/arm-deploy@v2
        id: deploy
        with:
          resourceGroupName: ${{ vars.AZURE_RESOURCE_GROUP }}
          template: ./bicep/main.bicep
          deploymentMode: Complete
          failOnStdErr: false
          scope: resourcegroup

  publish-dotnet-versions:
    name: Publish .NET Versions
    needs: deploy-bicep
    runs-on: ubuntu-latest

    strategy:
      matrix:
        dotnet-version: [6, 7, 8]
        platform: [Windows, Linux]

    steps:
      - name: "checkout"
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: "Login via Azure CLI"
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_RBAC_CREDENTIALS }}
          enable-AzPSSession: true

      - name: "Publish apps"
        shell: pwsh
        working-directory: apps/dotnetApp
        run: |
          $platform = "${{ matrix.platform }}"
          $version = "${{ matrix.dotnet-version }}"

          # Edit dotnetApp.csproj
          $csprojPath = "dotnetApp.csproj"
          $csprojContent = Get-Content -Path $csprojPath
          $csprojContent = $csprojContent -replace '<TargetFramework>.*<\/TargetFramework>', "<TargetFramework>net${version}.0</TargetFramework>"
          $csprojContent | Set-Content -Path $csprojPath

          Get-Content $csprojPath

          if ($platform -eq 'Windows') {
            $runtime = "dotnet:$version"
          } else {
            $runtime = "DOTNETCORE:${version}.0"
          }
          az webapp up --resource-group "${{ vars.AZURE_RESOURCE_GROUP }}" --name "app-$($platform.ToLower())-dotnet$version-versions-australiaeast" --os-type $platform --runtime "$runtime" --sku F1 --location australiaeast --track-status true

      - name: "Get version"
        shell: pwsh
        id: get-version
        run: |
          $ErrorActionPreference = "Stop"

          $platform = "${{ matrix.platform }}"
          $version = "${{ matrix.dotnet-version }}"

          $response = $null

          $count = 0
          while ($response -eq $null) {
              try {
                  $count += 1
                  Write-Host "Getting version for app-$($platform.ToLower())-dotnet$version-versions-australiaeast.azurewebsites.net"
                  $response = Invoke-RestMethod -Method Get -Uri "https://app-$($platform.ToLower())-dotnet$version-versions-australiaeast.azurewebsites.net"
              } catch {
                  Write-Host "Retrying in 5 seconds..."
                  Start-Sleep -Seconds 5
              }

              if ($count -eq 5) {
                  Write-Error "Failed to get response from app-$($platform.ToLower())-dotnet$version-versions-australiaeast.azurewebsites.net"
                  break
              }
          }

          $actualVersion = $response.Trim()
          Write-Output "$kuduApiBaseUrl $($version): $actualVersion"

          "| $platform | .NET $version | $actualVersion |" > output.txt

      - name: "Upload version"
        uses: actions/upload-artifact@v4
        with:
          name: output-${{ matrix.platform }}-${{ matrix.dotnet-version}}
          path: output.txt

  publish-node-versions:
    name: Publish Versions
    needs: deploy-bicep
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20]
        platform: [Windows, Linux]

    steps:
      - name: "checkout"
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: "Login via Azure CLI"
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_RBAC_CREDENTIALS }}
          enable-AzPSSession: true

      - name: "Publish apps"
        shell: pwsh
        working-directory: apps/nodeApp
        run: |
          $platform = "${{ matrix.platform }}"
          $version = "${{ matrix.node-version }}"

          if ($platform -eq 'Windows') {
            $runtime = "NODE:${version}LTS"
          } else {
            $runtime = "NODE:${version}-lts"
          }

          az webapp up --resource-group "${{ vars.AZURE_RESOURCE_GROUP }}" --name "app-$($platform.ToLower())-node$version-versions-australiaeast" --os-type $platform --runtime "$runtime" --sku F1 --location australiaeast --track-status true

      - name: "Get version"
        shell: pwsh
        id: get-version
        run: |
          $ErrorActionPreference = "Stop"

          $platform = "${{ matrix.platform }}"
          $version = "${{ matrix.node-version }}"

          $response = $null

          $count = 0
          while ($response -eq $null) {
              try {
                  $count += 1
                  Write-Host "Getting version for app-$($platform.ToLower())-node$version-versions-australiaeast.azurewebsites.net"
                  $response = Invoke-RestMethod -Method Get -Uri "https://app-$($platform.ToLower())-node$version-versions-australiaeast.azurewebsites.net"
              } catch {
                  Write-Host "Retrying in 5 seconds..."
                  Start-Sleep -Seconds 5
              }

              if ($count -eq 5) {
                  Write-Error "Failed to get response from app-$($platform.ToLower())-node$version-versions-australiaeast.azurewebsites.net"
                  break
              }
          }

          $actualVersion = $response.Trim()
          Write-Output "$kuduApiBaseUrl $($version): $actualVersion"

          "| $platform | Node $version | $actualVersion |" > output.txt

      - name: "Upload version"
        uses: actions/upload-artifact@v4
        with:
          name: output-${{ matrix.platform }}-${{ matrix.node-version}}
          path: output.txt

  publish-summary:
    name: Publish Summary
    needs:
      - publish-node-versions
      - publish-dotnet-versions

    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          path: .

      - name: Dump needs context
        shell: pwsh
        run: |
          "| Platform | Framework | Actual Version |" >> $Env:GITHUB_STEP_SUMMARY
          "|----------|-----------|----------------|" >> $Env:GITHUB_STEP_SUMMARY

          gci -Recurse

          Get-ChildItem -Recurse *.txt | Get-Content >> $Env:GITHUB_STEP_SUMMARY

# Push onto static web app branch

# name: Azure Static Web Apps CI/CD

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     types: [opened, synchronize, reopened, closed]
#     branches:
#       - main

# jobs:
#   build_and_deploy_job:
#     if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
#     runs-on: ubuntu-latest
#     name: Build and Deploy Job
#     steps:
#       - uses: actions/checkout@v3
#         with:
#           submodules: true
#           lfs: false
#       - name: Build And Deploy
#         id: builddeploy
#         uses: Azure/static-web-apps-deploy@v1
#         with:
#           azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_<GENERATED_HOSTNAME> }}
#           repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
#           action: "upload"
#           ###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
#           # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
#           app_location: "/" # App source code path
#           api_location: "" # Api source code path - optional
#           output_location: "/" # Built app content directory - optional
#           ###### End of Repository/Build Configurations ######

#   close_pull_request_job:
#     if: github.event_name == 'pull_request' && github.event.action == 'closed'
#     runs-on: ubuntu-latest
#     name: Close Pull Request Job
#     steps:
#       - name: Close Pull Request
#         id: closepullrequest
#         uses: Azure/static-web-apps-deploy@v1
#         with:
#           azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_<GENERATED_HOSTNAME> }}
#           action: "close"
