name: Build and Deploy

on:
  push:
    branches: ["main"]
  pull_request:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

# Ensure only one workflow run at a time per branch
concurrency:
  group: appservices-pipeline-${{ github.ref == 'refs/heads/main' && 'main' || github.ref }}
  cancel-in-progress: false

jobs:
  build-bicep:
    name: Build Bicep
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout GitHub Action"
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: "Login via Azure CLI"
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Test
        uses: azure/arm-deploy@v2
        with:
          resourceGroupName: ${{ vars.AZURE_RESOURCE_GROUP }}
          template: ./bicep/main.bicep
          failOnStdErr: false
          deploymentMode: Complete
          additionalArguments: --what-if
          scope: resourcegroup

      - name: Archive Bicep
        if: success() && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: bicep
          path: "./bicep"

  deploy-bicep:
    name: Deploy Bicep
    needs:
      - build-bicep
    runs-on: ubuntu-latest
    environment: dev
    if: github.ref == 'refs/heads/main'

    steps:
      - name: "Download Artifact"
        uses: actions/download-artifact@v5
        with:
          name: bicep
          path: "./bicep"

      - name: "Login via Azure CLI"
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: deploy
        uses: azure/arm-deploy@v2
        id: deploy
        with:
          resourceGroupName: ${{ vars.AZURE_RESOURCE_GROUP }}
          template: ./bicep/main.bicep
          deploymentMode: Complete
          failOnStdErr: false
          scope: resourcegroup

  publish-dotnet-versions:
    name: Publish .NET Versions
    needs: deploy-bicep
    runs-on: ubuntu-latest

    strategy:
      matrix:
        dotnet-version: [8, 9]
        platform: [Windows, Linux]
      fail-fast: false
      max-parallel: 2

    steps:
      - name: "checkout"
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: "Login via Azure CLI"
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: "Publish apps"
        shell: pwsh
        working-directory: apps/dotnetApp
        run: |
          $platform = "${{ matrix.platform }}"
          $version = "${{ matrix.dotnet-version }}"

          # Edit dotnetApp.csproj
          $csprojPath = "dotnetApp.csproj"
          $csprojContent = Get-Content -Path $csprojPath
          $csprojContent = $csprojContent -replace '<TargetFramework>.*<\/TargetFramework>', "<TargetFramework>net${version}.0</TargetFramework>"
          $csprojContent | Set-Content -Path $csprojPath

          Get-Content $csprojPath

          if ($platform -eq 'Windows') {
            $runtime = "dotnet:$version"
          } else {
            $runtime = "DOTNETCORE:${version}.0"
          }
          az webapp up --resource-group "${{ vars.AZURE_RESOURCE_GROUP }}" --name "app-$($platform.ToLower())-dotnet$version-versions-australiaeast" --os-type $platform --runtime "$runtime" --sku F1 --location australiaeast --track-status true

      - name: "Get version"
        shell: pwsh
        id: get-version
        run: |
          $ErrorActionPreference = "Stop"

          $platform = "${{ matrix.platform }}"
          $version = "${{ matrix.dotnet-version }}"

          $response = $null

          $count = 0
          while ($response -eq $null) {
              try {
                  $count += 1
                  Write-Host "Getting version for app-$($platform.ToLower())-dotnet$version-versions-australiaeast.azurewebsites.net"
                  $response = Invoke-RestMethod -Method Get -Uri "https://app-$($platform.ToLower())-dotnet$version-versions-australiaeast.azurewebsites.net"
              } catch {
                  Write-Host "Retrying in 5 seconds..."
                  Start-Sleep -Seconds 5
              }

              if ($count -eq 5) {
                  Write-Error "Failed to get response from app-$($platform.ToLower())-dotnet$version-versions-australiaeast.azurewebsites.net"
                  break
              }
          }

          $actualVersion = $response.Trim()
          Write-Output "$kuduApiBaseUrl $($version): $actualVersion"

          "| $platform | .NET $version | $actualVersion |" > output.txt

      - name: "Upload version"
        uses: actions/upload-artifact@v4
        with:
          name: output-${{ matrix.platform }}-${{ matrix.dotnet-version}}
          path: output.txt

      # Stop app service once we have the info to save cpu etc
      - name: App Service stop
        shell: pwsh
        run: |
          $platform = "${{ matrix.platform }}"
          $version = "${{ matrix.dotnet-version }}"
          az webapp stop --resource-group "${{ vars.AZURE_RESOURCE_GROUP }}" --name "app-$($platform.ToLower())-dotnet$version-versions-australiaeast"

  publish-node-versions:
    name: Publish Versions
    needs: deploy-bicep
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20, 22]
        platform: [Windows, Linux]
      fail-fast: false
      max-parallel: 2

    steps:
      - name: "checkout"
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: "Login via Azure CLI"
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: "Publish apps"
        shell: pwsh
        working-directory: apps/nodeApp
        run: |
          $platform = "${{ matrix.platform }}"
          $version = "${{ matrix.node-version }}"

          if ($platform -eq 'Windows') {
            $runtime = "NODE:${version}LTS"
          } else {
            $runtime = "NODE:${version}-lts"
          }

          az webapp up --resource-group "${{ vars.AZURE_RESOURCE_GROUP }}" --name "app-$($platform.ToLower())-node$version-versions-australiaeast" --os-type $platform --runtime "$runtime" --sku F1 --location australiaeast --track-status true

      - name: "Get version"
        shell: pwsh
        id: get-version
        run: |
          $ErrorActionPreference = "Stop"

          $platform = "${{ matrix.platform }}"
          $version = "${{ matrix.node-version }}"

          $response = $null

          $count = 0
          while ($response -eq $null) {
              try {
                  $count += 1
                  Write-Host "Getting version for app-$($platform.ToLower())-node$version-versions-australiaeast.azurewebsites.net"
                  $response = Invoke-RestMethod -Method Get -Uri "https://app-$($platform.ToLower())-node$version-versions-australiaeast.azurewebsites.net"
              } catch {
                  Write-Host "Retrying in 5 seconds..."
                  Start-Sleep -Seconds 5
              }

              if ($count -eq 5) {
                  Write-Error "Failed to get response from app-$($platform.ToLower())-node$version-versions-australiaeast.azurewebsites.net"
                  break
              }
          }

          $actualVersion = $response.Trim()
          Write-Output "$kuduApiBaseUrl $($version): $actualVersion"

          "| $platform | Node $version | $actualVersion |" > output.txt

      - name: "Upload version"
        uses: actions/upload-artifact@v4
        with:
          name: output-${{ matrix.platform }}-${{ matrix.node-version}}
          path: output.txt

      # Stop app service once we have the info to save cpu etc
      - name: App Service stop
        shell: pwsh
        run: |
          $platform = "${{ matrix.platform }}"
          $version = "${{ matrix.node-version }}"
          az webapp stop --resource-group "${{ vars.AZURE_RESOURCE_GROUP }}" --name "app-$($platform.ToLower())-node$version-versions-australiaeast"

  publish-summary:
    name: Publish Summary
    needs:
      - publish-node-versions
      - publish-dotnet-versions

    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          path: .

      - name: Dump needs context
        shell: pwsh
        run: |
          "| Platform | Framework | Actual Version |" >> $Env:GITHUB_STEP_SUMMARY
          "|----------|-----------|----------------|" >> $Env:GITHUB_STEP_SUMMARY

          gci -Recurse

          Get-ChildItem -Recurse *.txt | Get-Content >> $Env:GITHUB_STEP_SUMMARY

          # Create web directory
          New-Item -ItemType Directory -Path "web"

          Copy-Item $Env:GITHUB_STEP_SUMMARY -Destination web/index.md

      - name: Convert Markdown
        uses: jd-solanki/gh-action-md-to-html@v1.1.0
        with:
          # Stringified Array of [Array of source md file & file to generate] (i.e. [ ["index.md", "index.html"], ["changelog.md", "changelog.html"]])
          files: '[ ["web/index.md", "web/index.html"] ]'
          # Github Markdown theme to use. Options: "Auto", "Light" or "Dark"
          theme: # optional, default is Auto
          # Boolean value which will tell action to log the action it performs. Useful for debugging.
          # debug: # optional

      - name: Web files
        run: |
          ls web

          cat web/index.html

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: "web"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
