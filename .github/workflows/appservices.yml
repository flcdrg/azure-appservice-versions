name: Build and Deploy

# Max 10 free app service plans per location, so use new locations for new runtimes
on:
  push:
    branches: ["main"]
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0" # Every Sunday at midnight UTC

permissions:
  id-token: write
  contents: read

# Ensure only one workflow run at a time per branch
concurrency:
  group: appservices-pipeline-${{ github.ref == 'refs/heads/main' && 'main' || github.ref }}
  cancel-in-progress: false

jobs:
  publish-dotnet-versions:
    name: Publish .NET Versions
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    strategy:
      matrix:
        dotnet-version: [8, 9]
        platform: [Windows, Linux]

    steps:
      - name: "checkout"
        uses: actions/checkout@v5
        with:
          persist-credentials: false
      - name: "Login via Azure CLI"
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
      - name: "Publish apps"
        shell: pwsh
        working-directory: apps/dotnetApp
        run: |
          $platform = "${{ matrix.platform }}"
          $version = "${{ matrix.dotnet-version }}"
          $csprojPath = "dotnetApp.csproj"
          $csprojContent = Get-Content -Path $csprojPath
          $csprojContent = $csprojContent -replace '<TargetFramework>.*<\/TargetFramework>', "<TargetFramework>net${version}.0</TargetFramework>"
          $csprojContent | Set-Content -Path $csprojPath
          Get-Content $csprojPath
          if ($platform -eq 'Windows') {
            $runtime = "dotnet:$version"
          } else {
            $runtime = "DOTNETCORE:${version}.0"
          }
          az webapp up --resource-group "${{ vars.AZURE_RESOURCE_GROUP }}" --name "app-$($platform.ToLower())-dotnet$version-versions-australiaeast" --os-type $platform --runtime "$runtime" --sku F1 --location australiaeast --track-status true --plan "appsp-$($platform.ToLower())-dotnet$version-versions-australiaeast"
      - name: "Get version"
        shell: pwsh
        id: get-version
        run: |
          $ErrorActionPreference = "Stop"
          $platform = "${{ matrix.platform }}"
          $version = "${{ matrix.dotnet-version }}"
          $response = $null
          $count = 0
          while ($response -eq $null) {
              try {
                  $count += 1
                  Write-Host "Getting version for app-$($platform.ToLower())-dotnet$version-versions-australiaeast.azurewebsites.net"
                  $response = Invoke-RestMethod -Method Get -Uri "https://app-$($platform.ToLower())-dotnet$version-versions-australiaeast.azurewebsites.net"
              } catch {
                  Write-Host "Retrying in 5 seconds..."
                  Start-Sleep -Seconds 5
              }
              if ($count -eq 5) {
                  Write-Error "Failed to get response from app-$($platform.ToLower())-dotnet$version-versions-australiaeast.azurewebsites.net"
                  break
              }
          }
          $actualVersion = $response.Trim()
          $json = @{ platform = $platform; framework = ".NET"; version = $version; actualVersion = $actualVersion } | ConvertTo-Json
          $json | Set-Content -Path output.json
      - name: "Upload version"
        uses: actions/upload-artifact@v4
        with:
          name: output-${{ matrix.platform }}-${{ matrix.dotnet-version}}
          path: output.json
      - name: App Service plan delete
        shell: pwsh
        run: |
          $platform = "${{ matrix.platform }}"
          $version = "${{ matrix.dotnet-version }}"
          az webapp delete --name "app-$($platform.ToLower())-dotnet$version-versions-australiaeast" --resource-group "${{ vars.AZURE_RESOURCE_GROUP }}"

          az appservice plan delete --name "appsp-$($platform.ToLower())-dotnet$version-versions-australiaeast" --resource-group "${{ vars.AZURE_RESOURCE_GROUP }}" --yes

  publish-node-versions:
    name: Publish Node Versions
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        node-version: [20, 22]
        platform: [Windows, Linux]

    steps:
      - name: "checkout"
        uses: actions/checkout@v5
        with:
          persist-credentials: false
      - name: "Login via Azure CLI"
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
      - name: "Publish apps"
        shell: pwsh
        working-directory: apps/nodeApp
        run: |
          $platform = "${{ matrix.platform }}"
          $version = "${{ matrix.node-version }}"
          if ($platform -eq 'Windows') {
            $runtime = "NODE:${version}LTS"
          } else {
            $runtime = "NODE:${version}-lts"
          }
          az webapp up --resource-group "${{ vars.AZURE_RESOURCE_GROUP }}" --name "app-$($platform.ToLower())-node$version-versions-australiaeast" --os-type $platform --runtime "$runtime" --sku F1 --location australiaeast --track-status true --plan "appsp-$($platform.ToLower())-node$version-versions-australiaeast"
      - name: "Get version"
        shell: pwsh
        id: get-version
        run: |
          $ErrorActionPreference = "Stop"
          $platform = "${{ matrix.platform }}"
          $version = "${{ matrix.node-version }}"
          $response = $null
          $count = 0
          while ($response -eq $null) {
              try {
                  $count += 1
                  Write-Host "Getting version for app-$($platform.ToLower())-node$version-versions-australiaeast.azurewebsites.net"
                  $response = Invoke-RestMethod -Method Get -Uri "https://app-$($platform.ToLower())-node$version-versions-australiaeast.azurewebsites.net"
              } catch {
                  Write-Host "Retrying in 5 seconds..."
                  Start-Sleep -Seconds 5
              }
              if ($count -eq 5) {
                  Write-Error "Failed to get response from app-$($platform.ToLower())-node$version-versions-australiaeast.azurewebsites.net"
                  break
              }
          }
          $actualVersion = $response.Trim()
          $json = @{ platform = $platform; framework = "Node"; version = $version; actualVersion = $actualVersion } | ConvertTo-Json
          $json | Set-Content -Path output.json
      - name: "Upload version"
        uses: actions/upload-artifact@v4
        with:
          name: output-${{ matrix.platform }}-${{ matrix.node-version}}
          path: output.json
      - name: App Service stop
        shell: pwsh
        run: |
          $platform = "${{ matrix.platform }}"
          $version = "${{ matrix.node-version }}"
          az webapp delete --name "app-$($platform.ToLower())-node$version-versions-australiaeast" --resource-group "${{ vars.AZURE_RESOURCE_GROUP }}"
          az appservice plan delete --name "appsp-$($platform.ToLower())-node$version-versions-australiaeast" --resource-group "${{ vars.AZURE_RESOURCE_GROUP }}" --yes

  # Use australiasoutheast for location
  publish-python-versions:
    name: Publish Python Versions
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        python-version:
          - 3.9
          - 3.10
          - 3.11
          - 3.12
          - 3.13
        platform: [Linux]

    steps:
      - name: "checkout"
        uses: actions/checkout@v5
        with:
          persist-credentials: false
      - name: "Login via Azure CLI"
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
      - name: "Publish app"
        shell: pwsh
        working-directory: apps/pythonApp
        run: |
          $platform = "${{ matrix.platform }}"
          $version = "${{ matrix.python-version }}" -replace ".", "" # Can't have dots in resource name
          $runtime = "PYTHON|$version"
          $appservicename = "app-$($platform.ToLower())-python$version-versions-australiasoutheast"
          Write-Host "Creating web app $appservicename"
          az webapp up --resource-group "${{ vars.AZURE_RESOURCE_GROUP }}" --name $appservicename --os-type Linux --runtime "$runtime" --sku F1 --location australiasoutheast --track-status true

          # Create GitHub variable
          echo "APP_SERVICE_NAME=$appservicename" >> $GITHUB_ENV

      - name: "Get version"
        shell: pwsh
        id: get-version
        run: |
          $ErrorActionPreference = "Stop"
          $version = "${{ matrix.python-version }}"
          $appservicename = $env:APP_SERVICE_NAME
          $response = $null
          $count = 0
          while ($response -eq $null) {
              try {
                  $count += 1
                  Write-Host "Getting version for $appservicename.azurewebsites.net"
                  $response = Invoke-RestMethod -Method Get -Uri "https://$appservicename.azurewebsites.net"
              } catch {
                  Write-Host "Retrying in 5 seconds..."
                  Start-Sleep -Seconds 5
              }
              if ($count -eq 5) {
                  Write-Error "Failed to get response from $appservicename.azurewebsites.net"
                  break
              }
          }
          $actualVersion = $response.Trim()
          $json = @{ platform = "Linux"; framework = "Python"; version = $version; actualVersion = $actualVersion } | ConvertTo-Json
          $json | Set-Content -Path output.json
      - name: "Upload version"
        uses: actions/upload-artifact@v4
        with:
          name: output-Linux-${{ matrix.python-version }}
          path: output.json
      - name: App Service stop
        shell: pwsh
        run: |
          $version = "${{ matrix.python-version }}" -replace ".", ""
          $appservicename = $env:APP_SERVICE_NAME
          az webapp delete --name $appservicename --resource-group "${{ vars.AZURE_RESOURCE_GROUP }}"
          az appservice plan delete --name "appsp-linux-python$version-versions-australiasoutheast" --resource-group "${{ vars.AZURE_RESOURCE_GROUP }}" --yes

  publish-summary:
    name: Publish Summary
    needs:
      - publish-node-versions
      - publish-dotnet-versions
      - publish-python-versions
    runs-on: ubuntu-latest

    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    permissions:
      contents: read
      actions: read
      pages: write
      id-token: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          path: .

      - name: Build summary and HTML
        shell: pwsh
        run: |
          $jsonFiles = Get-ChildItem -Recurse -Filter *.json
          $rows = @()
          foreach ($file in $jsonFiles) {
            $obj = Get-Content $file.FullName | ConvertFrom-Json
            $rows += $obj
          }

          # Sort rows for consistent output
          $rows = $rows | Sort-Object platform, framework, version

          # Build Markdown table for summary
          $md = "| Platform | Framework | Version | Actual Version |`n"
          $md += "|----------|-----------|---------|----------------|`n"
          foreach ($row in $rows) {
            $md += "| $($row.platform) | $($row.framework) | $($row.version) | $($row.actualVersion) |`n"
          }
          $md | Out-File -FilePath $Env:GITHUB_STEP_SUMMARY -Encoding utf8


          # Build HTML table for index.html, line by line, with ARIA sortable table markup and JS
          $htmlLines = @()
          $htmlLines += '<!DOCTYPE html>'
          $htmlLines += '<html lang="en">'
          $htmlLines += '<head>'
          $htmlLines += '  <meta charset="UTF-8">'
          $htmlLines += '  <title>Azure App Service runtime versions</title>'
          $htmlLines += '  <style>'
          $htmlLines += '    body { font-family: Arial, sans-serif; }'
          $htmlLines += '    table { border-collapse: collapse; width: 100%; }'
          $htmlLines += '    th, td { border: 1px solid #ddd; padding: 8px; }'
          $htmlLines += '    th { background-color: #f2f2f2; cursor: pointer; }'
          $htmlLines += '    th[aria-sort]::after { content: " \2195"; }'
          $htmlLines += '    th[aria-sort="ascending"]::after { content: " \25B2"; }'
          $htmlLines += '    th[aria-sort="descending"]::after { content: " \25BC"; }'
          $htmlLines += '  </style>'
          $htmlLines += '</head>'
          $htmlLines += '<body>'
          $htmlLines += '  <h1>Azure App Service runtime versions</h1>'
          $htmlLines += '  <p>This page lists the current runtime versions provided by newly provisioned for <a href="https://learn.microsoft.com/azure/app-service/overview?WT.mc_id=DOP-MVP-5001655">Azure App Services</a> resources.</p>'
          $htmlLines += '  <table id="sortable-table" aria-label="Azure App Service runtime versions" role="table">'
          $htmlLines += '    <thead>'
          $htmlLines += '      <tr>'
          $htmlLines += '        <th role="columnheader" aria-sort="none" tabindex="0">Platform</th>'
          $htmlLines += '        <th role="columnheader" aria-sort="none" tabindex="0">Framework</th>'
          $htmlLines += '        <th role="columnheader" aria-sort="none" tabindex="0">Version</th>'
          $htmlLines += '        <th role="columnheader" aria-sort="none" tabindex="0">Actual Version</th>'
          $htmlLines += '      </tr>'
          $htmlLines += '    </thead>'
          $htmlLines += '    <tbody>'
          foreach ($row in $rows) {
            $htmlLines += "      <tr><td>$($row.platform)</td><td>$($row.framework)</td><td>$($row.version)</td><td>$($row.actualVersion)</td></tr>"
          }
          $htmlLines += '    </tbody>'
          $htmlLines += '  </table>'
          $htmlLines += '  <script>'
          $htmlLines += '    // Sortable table script based on W3C ARIA example'
          $htmlLines += '    document.addEventListener("DOMContentLoaded", function() {'
          $htmlLines += '      const table = document.getElementById("sortable-table");'
          $htmlLines += '      const headers = table.querySelectorAll("th");'
          $htmlLines += '      let sortColumn = -1;'
          $htmlLines += '      let sortDirection = 1; // 1 = ascending, -1 = descending'
          $htmlLines += '      headers.forEach((header, i) => {'
          $htmlLines += '        header.addEventListener("click", () => sortTable(i));'
          $htmlLines += '        header.addEventListener("keydown", (e) => {'
          $htmlLines += '          if (e.key === "Enter" || e.key === " ") sortTable(i);'
          $htmlLines += '        });'
          $htmlLines += '      });'
          $htmlLines += '      function sortTable(col) {'
          $htmlLines += '        const tbody = table.querySelector("tbody");'
          $htmlLines += '        const rows = Array.from(tbody.querySelectorAll("tr"));'
          $htmlLines += '        if (sortColumn === col) {'
          $htmlLines += '          sortDirection *= -1;'
          $htmlLines += '        } else {'
          $htmlLines += '          sortColumn = col; sortDirection = 1;'
          $htmlLines += '        }'
          $htmlLines += '        headers.forEach((h, idx) => {'
          $htmlLines += '          h.setAttribute("aria-sort", idx === col ? (sortDirection === 1 ? "ascending" : "descending") : "none");'
          $htmlLines += '        });'
          $htmlLines += '        rows.sort((a, b) => {'
          $htmlLines += '          let t1 = a.children[col].textContent.trim();'
          $htmlLines += '          let t2 = b.children[col].textContent.trim();'
          $htmlLines += '          if (!isNaN(t1) && !isNaN(t2)) { t1 = +t1; t2 = +t2; }'
          $htmlLines += '          return t1 > t2 ? sortDirection : t1 < t2 ? -sortDirection : 0;'
          $htmlLines += '        });'
          $htmlLines += '        rows.forEach(row => tbody.appendChild(row));'
          $htmlLines += '      }'
          $htmlLines += '    });'
          $htmlLines += '  </script>'
          $htmlLines += "  <p>Last updated $(Get-Date -Format 'O')</p>"
          $htmlLines += "  <p>Created by <a href='https://david.gardiner.net.au'>David Gardiner</a></p>"
          $htmlLines += '  <p>Source code available on <a href="https://github.com/flcdrg/azure-appservice-versions">GitHub</a></p>'
          $htmlLines += '</body>'
          $htmlLines += '</html>'

          # Create web directory
          New-Item -ItemType Directory -Path "web" -Force
          $htmlLines | Set-Content -Path "web/index.html" -Encoding utf8

      - name: Web files
        run: |
          ls web

          cat web/index.html

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "web"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
