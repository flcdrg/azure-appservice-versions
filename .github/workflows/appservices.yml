name: Build and Deploy

on:
  push:
    branches: ["main"]
  pull_request:
  workflow_dispatch:

jobs:
  build-bicep:
    name: Build Bicep
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout GitHub Action"
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: "Login via Azure CLI"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_RBAC_CREDENTIALS }}

      - name: Test
        uses: azure/arm-deploy@v2
        with:
          resourceGroupName: ${{ vars.AZURE_RESOURCE_GROUP }}
          template: ./bicep/main.bicep
          failOnStdErr: false
          deploymentMode: Complete
          additionalArguments: --what-if

      - name: Archive Bicep
        if: success() && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: bicep
          path: "./bicep"

  deploy-bicep:
    name: Deploy Bicep
    needs:
      - build-bicep
    runs-on: ubuntu-latest
    environment: dev
    if: github.ref == 'refs/heads/main'

    steps:
      - name: "Download Artifact"
        uses: actions/download-artifact@v4
        with:
          name: bicep
          path: "./bicep"

      - name: "Login via Azure CLI"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_RBAC_CREDENTIALS }}

      - name: deploy
        uses: azure/arm-deploy@v2
        id: deploy
        with:
          resourceGroupName: ${{ vars.AZURE_RESOURCE_GROUP }}
          template: ./bicep/main.bicep
          deploymentMode: Complete
          failOnStdErr: false

  publish-versions:
    name: Publish Versions
    needs: deploy-bicep
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20]
        platform: [Windows, Linux]

    outputs:
      output1: ${{ steps.get-version.outputs.version }}

    steps:
      - name: "checkout"
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: "Login via Azure CLI"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_RBAC_CREDENTIALS }}
          enable-AzPSSession: true

      - name: "Publish apps"
        shell: pwsh
        working-directory: app
        run: |
          $platform = "${{ matrix.platform }}"
          $version = "${{ matrix.node-version }}"

          if ($platform -eq 'Windows') {
            $runtime = "NODE:${version}LTS"
          } else {
            $runtime = "NODE:${version}-lts"
          }

          az webapp up --resource-group "${{ vars.AZURE_RESOURCE_GROUP }}" --name "app-$($platform.ToLower())-node$version-versions-australiaeast" --os-type $platform --runtime "$runtime" --track-status true

      - name: "Get version"
        shell: pwsh
        id: get-version
        run: |
          $ErrorActionPreference = "Stop"

          $platform = "${{ matrix.platform }}"
          $version = "${{ matrix.node-version }}"

          $response = $null

          $count = 0
          while ($response -eq $null) {
              try {
                  $count += 1
                  Write-Host "Getting version for app-$($platform.ToLower())-node$version-versions-australiaeast.azurewebsites.net"
                  $response = Invoke-RestMethod -Method Get -Uri "https://app-$($platform.ToLower())-node$version-versions-australiaeast.azurewebsites.net"
              } catch {
                  Write-Host "Retrying in 5 seconds..."
                  Start-Sleep -Seconds 5
              }

              if ($count -eq 5) {
                  Write-Error "Failed to get response from app-$($platform.ToLower())-node$version-versions-australiaeast.azurewebsites.net"
                  break
              }
          }

          $actualVersion = $response.Trim()
          Write-Output "$kuduApiBaseUrl $($version): $actualVersion"
          "| $platform Node $version | $actualVersion |" >> $Env:GITHUB_STEP_SUMMARY

          "version=| $platform Node $version | $actualVersion |" >> "$Env:GITHUB_OUTPUT"

  publish-summary:
    name: Publish Summary
    needs: publish-versions
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Dump needs context
        env:
          NEEDS_CONTEXT: ${{ toJson(needs) }}
        run: |
          echo "$NEEDS_CONTEXT"

          "| Framework | Actual Version |" >> $GITHUB_STEP_SUMMARY
          "|-------|-----------|" >> $GITHUB_STEP_SUMMARY
